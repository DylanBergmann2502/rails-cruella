#!/bin/bash
# bin/run

# Make script executable from anywhere
cd "$(dirname "$0")/.."

# Use ENV from environment or default to local
ENV=${ENV:-local}
COMPOSE_FILE="deploy/${ENV}/web.yml"

# Check if Docker is installed and running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo "Error: Docker is not running or not installed"
        exit 1
    fi
}

# Validate environment
validate_env() {
    if [ "$ENV" != "local" ] && [ "$ENV" != "production" ]; then
        echo "Error: Invalid environment. Must be 'local' or 'production'"
        exit 1
    fi

    if [ ! -f "$COMPOSE_FILE" ]; then
        echo "Error: Compose file not found: $COMPOSE_FILE"
        exit 1
    fi
}

validate_env

case "$1" in
    "check")
        # Check Docker versions
        echo "Checking Docker installations..."
        docker --version
        docker compose version
        ;;

    "build")
        check_docker
        docker compose -f $COMPOSE_FILE build
        ;;

    "up")
        check_docker
        shift  # Remove 'up' from arguments
        docker compose -f $COMPOSE_FILE up "$@"
        ;;

    "start")
        check_docker
        shift  # Remove 'start' from arguments
        docker compose -f $COMPOSE_FILE up --build --remove-orphans "$@"
        ;;

    "start:lite")
        check_docker
        shift  # Remove 'start:lite' from arguments
        docker compose -f $COMPOSE_FILE up --build --remove-orphans postgres rails minio
        ;;

    "stop")
        check_docker
        shift  # Remove 'stop' from arguments
        docker compose -f $COMPOSE_FILE stop "$@"
        ;;

    "down")
        check_docker
        shift  # Remove 'down' from arguments
        docker compose -f $COMPOSE_FILE down "$@"
        ;;

    "logs")
        check_docker
        docker compose -f $COMPOSE_FILE logs -f
        ;;

    "ps")
        # List running containers
        check_docker
        docker compose -f $COMPOSE_FILE ps
        ;;

    "restart")
        # Restart all containers
        check_docker
        docker compose -f $COMPOSE_FILE restart
        ;;

    "rails")
        # Run any Rails command
        # Usage: ./bin/run rails <command>
        check_docker
        shift  # Remove 'rails' from arguments
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec rails "$@"
        ;;

    "console")
        check_docker
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec rails console
        ;;

    "generate")
        # Generate Rails scaffolds, models, etc.
        check_docker
        shift  # Remove 'generate' from arguments
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec rails generate "$@"
        ;;

    "migrate")
        # Run database migrations
        check_docker
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec rails db:migrate
        ;;

    "rollback")
        # Rollback database migrations
        check_docker
        shift  # Remove 'rollback' from arguments
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec rails db:rollback "$@"
        ;;

    "seed")
        # Seed the database
        check_docker
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec rails db:seed
        ;;

    "reset")
        # Reset the database
        check_docker
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec rails db:reset
        ;;

    "format")
        # Format Rails code with StandardRB
        check_docker
        shift  # Remove 'format' from arguments
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec standardrb --fix "${@:-.}"
        ;;

    "lint")
        # Lint Rails code with StandardRB
        check_docker
        shift  # Remove 'lint' from arguments
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec standardrb "${@:-.}"
        ;;

    "brakeman")
        # Run security analysis
        check_docker
        shift  # Remove 'brakeman' from arguments
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec brakeman "$@"
        ;;

    "rspec")
        check_docker
        shift  # Remove 'rspec' from arguments
        docker compose -f $COMPOSE_FILE run --rm rails bundle exec rspec "$@"
        ;;

    "bundle")
        # Run bundle commands
        check_docker
        shift  # Remove 'bundle' from arguments
        docker compose -f $COMPOSE_FILE run --rm rails bundle "$@"
        ;;

    "sidekiq")
        # View Sidekiq web UI or run worker commands
        check_docker
        shift  # Remove 'sidekiq' from arguments
        if [ "$1" = "web" ]; then
            echo "Starting Sidekiq Web UI..."
            docker compose -f $COMPOSE_FILE up sidekiq-web
        else
            docker compose -f $COMPOSE_FILE run --rm rails bundle exec sidekiq "$@"
        fi
        ;;

    *)
        echo "Rails Cruella Management Commands"
        echo "=================================="
        echo "Usage:"
        echo "  ./bin/run <command>                # Uses local environment"
        echo "  ENV=production ./bin/run <command> # Uses production environment"
        echo ""
        echo "Basic Commands:"
        echo "  check               - Check Docker installations"
        echo "  build               - Build all containers"
        echo "  up [options]        - Start containers in attached mode"
        echo "  start [options]     - Build and start containers with orphan removal"
        echo "  start:lite          - Build and start only \`rails\`, \`postgres\`, and \`minio\`"
        echo "  stop [options]      - Stop containers"
        echo "  down [options]      - Stop and remove containers"
        echo "  logs                - View container logs"
        echo "  ps                  - List running containers"
        echo "  restart             - Restart all containers"
        echo ""
        echo "Rails Commands:"
        echo "  rails <command>     - Run any Rails command"
        echo "  console             - Open Rails console"
        echo "  generate <args>     - Run Rails generators"
        echo "  migrate             - Run database migrations"
        echo "  rollback [steps]    - Rollback database migrations"
        echo "  seed                - Seed the database"
        echo "  reset               - Reset the database"
        echo "  bundle <command>    - Run bundle commands"
        echo ""
        echo "Code Quality Commands:"
        echo "  format [paths]      - Format Rails code with StandardRB (defaults to entire codebase)"
        echo "  lint [paths]        - Lint Rails code with StandardRB (defaults to entire codebase)"
        echo "  brakeman [options]  - Run security analysis"
        echo "  rspec [options]     - Run Rails tests"
        echo ""
        echo "Background Jobs:"
        echo "  sidekiq web         - Start Sidekiq Web UI"
        echo "  sidekiq [options]   - Run Sidekiq worker commands"
        ;;
esac